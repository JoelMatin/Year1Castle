"""
Projet d'info : Petit jeu du type jeu d’évasion (escape game) dans lequel le joueur commande au clavier
    les déplacements d’un personnage au sein d’un « château » représenté en plan.
    Le château est constitué de cases vides (pièces, couloirs), de murs, de portes,
    que le personnage ne pourra franchir qu’en répondant à des questions, d’objets à ramasser,
    qui l’aideront à trouver les réponses à ces questions et de la case de sortie / quête du château.
    Le but du jeu est d’atteindre cette dernière.
Auteurs : Joël Matin (514373), Noémi Mertens (514074)
Date : Octobre/novembre 2020
Entrée : Fichiers texte d'un plan, d'une liste d'objets à ramasser et d'une liste de questions/réponses
Sortie : Fenêtre turtle avec le jeu
"""

from CONFIGS import *
import turtle as t

LARG_fenetre = 600
HAUT_fenetre = 550
COULOIR = 0
MUR = 1
SORTIE = 2
PORTE = 3
OBJET = 4
HAUTEUR_ANNONCE = 40
LARGEUR_INVENTAIRE = 170

# Setup turtle:
t.setup(LARG_fenetre, HAUT_fenetre)
t.screensize(480, 480)
t.speed(0)
t.title("Chateau")
t.tracer(0)  # Affiche le plan directement
t2 = t.Turtle()


def lire_matrice(fichier):
    """reçoit en argument le nom d’un fichier texte contenant le plan à tracer.
    Renvoie en sortie une matrice correspondant au plan."""
    with open(fichier) as plan:
        return [[int(colonne) for colonne in ligne.split()] for ligne in plan]


def calculer_pas(matrice):
    """calcule la dimension à donner aux cases pour que le plan tienne dans la zone de la fenêtre turtle"""
    largeur_plan = 480 - LARGEUR_INVENTAIRE
    hauteur_plan = 480 - HAUTEUR_ANNONCE
    return min(largeur_plan // len(matrice[1]), hauteur_plan // len(matrice))


def coordonnees(case, pas):
    """calcule les coordonnées en pixels turtle du coin inférieur gauche d’une case
    définie par ses coordonnées (numéros de ligne et de colonne)"""
    x = -240 + (case[1]) * pas
    y = 200 - (case[0] + 1) * pas
    return x, y


def tracer_carre(dimension):
    """trace un carré dont la dimension en pixels turtle est donnée en argument."""
    for i in range(4):
        t.forward(int(dimension))
        t.left(90)
        t.hideturtle()


def tracer_case(case, couleur, pas):
    """reçoit en arguments un couple de coordonnées en indice dans la matrice contenant le plan, une couleur,
    et un pas (taille d'un côté) et appelle la fonction tracer_carre pour tracer un carré d’une certaine
    couleur et taille à un certain endroit."""
    point_de_depart = coordonnees(case, pas)
    t.up()
    t.goto(point_de_depart)
    t.down()
    t.begin_fill()
    t.color(COULEUR_EXTERIEUR)
    t.fillcolor(couleur)
    tracer_carre(pas)
    t.end_fill()


def afficher_plan(matrice):
    """Pour chaque élément ligne de la matrice, pour chaque élément colonne de cet élément ligne,
    trace une case à l’emplacement correspondant, dans une couleur correspondant à ce que dit la matrice."""
    couleur = 'white'
    for li in range(len(matrice)):
        for co in range(len(matrice[li])):
            case = matrice[li][co]
            if case == MUR:
                couleur = COULEUR_MUR
            elif case == COULOIR:
                couleur = COULEUR_COULOIR
            elif case == OBJET:
                couleur = COULEUR_OBJET
            elif case == PORTE:
                couleur = COULEUR_PORTE
            elif case == SORTIE:
                couleur = COULEUR_OBJECTIF
            tracer_case((li, co), couleur, calculer_pas(matrice))


def creer_dictionnaire_des_objets(fichier_des_objets):
    """Crée un dictionnaire avec en clés les coordonnées
    des cases où se trouvent les objets et en valeurs leur noms"""
    d = {}
    with open(fichier_des_objets, encoding='utf-8') as objets:
        for ligne in objets:
            coordonne, nom_objet = eval(ligne)
            d[coordonne] = nom_objet
    return d


def ramasser_objet(matrice, position, ensemble):
    """Affiche l'annonce de récupération de l'objet et le place dans l'inventaire"""
    matrice[position[0]][position[1]] = 0  # change la valeur objet de la case en valeur couloir
    dico_obj = creer_dictionnaire_des_objets(fichier_objets)
    obj = dico_obj[position]  # attribue à obj la valeur de clé 'position' dans le dictionnaire dico_obj
    ensemble.append(obj)  # on insère les noms des objets dans un ensemble des objets ramassés
    affiche_annonce('Vous avez trouvé : ' + str(obj))
    t.up()
    indice_obj = ensemble.index(obj)
    t.goto(POINT_AFFICHAGE_INVENTAIRE[0] + 10, POINT_AFFICHAGE_INVENTAIRE[1] - ((indice_obj + 1) * 20))
    t.down()
    t.color('black')
    t.write(str(ensemble[indice_obj]), font=('Arial', 8, 'normal'))
    t.up()


def affiche_annonce(annonce):  # fonction ajoutée
    """Reçoit en paramètre le texte à afficher dans le bandeau d'annonce et l'affiche"""
    t2.clear()
    t2.up()
    t2.goto(POINT_AFFICHAGE_ANNONCES)
    t2.down()
    t2.color('black')
    t2.write(annonce, font=('Arial', 8, 'bold'))
    t2.up()


def poser_question(matrice, case, mouvement):
    """reçoit la matrice plan et la case d'une porte en paramètres et pose une question au joueur,
    Si bonne réponse : modifie la nature de la case (porte -> couloir) et renvoie vrai
    Si mauvaise réponse : renvoie False"""
    affiche_annonce("La porte est fermée.")
    dico_questions = creer_dictionnaire_des_objets(fichier_questions)
    question = dico_questions[case][0]
    bonne_reponse = dico_questions[case][1]
    reponse_joueur = t.textinput("Question", question)
    t.listen()
    if reponse_joueur == bonne_reponse:
        affiche_annonce("Bonne réponse ! La porte s'ouvre.")
        matrice[case[0]][case[1]] = 0
        res = True
    else:
        affiche_annonce("Mauvaise réponse ! La porte reste fermée.")
        matrice[case[0]][case[1]] = 1
        res = False
    return res


def deplacer(matrice, position, mouvement):
    """Renvoie True si la case ciblée est une case vide (couloir) ou une case objet (à modif dans niveau 3)
    et False si la case ciblée est un mur (ou une porte) ou sort des limites du plan"""
    # case_joueur = matrice[position[0]][position[1]]
    try:
        res = False
        case_ciblee = matrice[position[0] + mouvement[0]][position[1] + mouvement[1]]
        if case_ciblee == OBJET or case_ciblee == COULOIR:
            res = True
        elif case_ciblee == PORTE:
            coord_case_ciblee = position[0] + mouvement[0], position[1] + mouvement[1]
            if poser_question(matrice, coord_case_ciblee, mouvement):  # Si on répond correctement
                res = True
        elif case_ciblee == SORTIE:
            affiche_annonce("Félicitations, vous avez GAGNÉ !")
            res = True
    except IndexError:  # si le joueur veut sortir des limites du plan
        res = False
    return res


def tracer_perso(case):  # fonction ajoutée pour alléger les fonctions de déplacement
    """Reçoit une case sous forme de tuple et trace le perso (rond) dessus"""
    t.setheading(0)  # tortue pointe vers l'est (mode standard)
    pas = calculer_pas(MAT_plan)
    tracer_case(case, COULEUR_VUE, pas)
    t.forward(pas / 2)
    t.left(90)
    t.forward(pas / 2)
    t.dot(RATIO_PERSONNAGE * pas, COULEUR_PERSONNAGE)


def deplacer_bas():
    global MAT_plan, position_perso
    pas = calculer_pas(MAT_plan)
    if deplacer(MAT_plan, position_perso, (1, 0)):
        t.goto(coordonnees(position_perso, pas))
        t.right(90)
        tracer_case(position_perso, COULEUR_VUE, pas)  # Trace un carré par dessus le perso
        t.up()
        nv_position = (position_perso[0] + 1, position_perso[1])  # actualise position_perso (modif la variable globale)
        position_perso = nv_position
        t.goto(coordonnees(nv_position, pas))
        tracer_perso(nv_position)
        if MAT_plan[nv_position[0]][nv_position[1]] == OBJET:
            ramasser_objet(MAT_plan, nv_position, objets_ramasses)  # Effectue l'annonce de récupération d'un objet
    t.onkeypress(deplacer_bas, "Down")  # Réassocie la touche Down à la fonction deplacer_bas


def deplacer_gauche():
    global MAT_plan, position_perso
    pas = calculer_pas(MAT_plan)
    if deplacer(MAT_plan, position_perso, (0, -1)):
        t.goto(coordonnees(position_perso, pas))
        t.right(90)
        tracer_case(position_perso, COULEUR_VUE, pas)
        t.up()
        nv_position = (position_perso[0], position_perso[1] - 1)
        position_perso = nv_position
        t.goto(coordonnees(nv_position, pas))
        tracer_perso(nv_position)
        if MAT_plan[nv_position[0]][nv_position[1]] == OBJET:
            ramasser_objet(MAT_plan, nv_position, objets_ramasses)  # Effectue l'annonce de récupération d'un objet
    t.onkeypress(deplacer_gauche, "Left")  # Réassocie la touche Left à la fonction deplacer_gauche


def deplacer_droite():
    global MAT_plan, position_perso
    pas = calculer_pas(MAT_plan)
    if deplacer(MAT_plan, position_perso, (0, 1)):
        t.goto(coordonnees(position_perso, pas))
        t.right(90)
        tracer_case(position_perso, COULEUR_VUE, pas)
        t.up()
        nv_position = (position_perso[0], position_perso[1] + 1)
        position_perso = nv_position
        t.goto(coordonnees(nv_position, pas))
        tracer_perso(nv_position)
        if MAT_plan[nv_position[0]][nv_position[1]] == OBJET:
            ramasser_objet(MAT_plan, nv_position, objets_ramasses)  # Effectue l'annonce de récupération d'un objet
    t.onkeypress(deplacer_droite, "Right")  # Réassocie la touche Right à la fonction deplacer_droite


def deplacer_haut():
    global MAT_plan, position_perso
    pas = calculer_pas(MAT_plan)
    if deplacer(MAT_plan, position_perso, (-1, 0)):
        t.goto(coordonnees(position_perso, pas))
        t.right(90)
        tracer_case(position_perso, COULEUR_VUE, pas)
        t.up()
        nv_position = (position_perso[0] - 1, position_perso[1])
        position_perso = nv_position
        t.goto(coordonnees(nv_position, pas))
        tracer_perso(nv_position)
        if MAT_plan[nv_position[0]][nv_position[1]] == OBJET:
            ramasser_objet(MAT_plan, nv_position, objets_ramasses)  # Effectue l'annonce de récupération d'un objet
    t.onkeypress(deplacer_haut, "Up")  # Réassocie la touche Up à la fonction deplacer_haut


MAT_plan = lire_matrice(fichier_plan)
afficher_plan(MAT_plan)
t.up()
objets_ramasses = []

position_perso = (0, 1)  # position du perso (va être mise à jour par les fonctions de déplacement)
t.goto(coordonnees(POSITION_DEPART, calculer_pas(MAT_plan)))
tracer_perso(POSITION_DEPART)

t.up()
t.goto(POINT_AFFICHAGE_INVENTAIRE)
t.down()
t.color('black')
t.write('Inventaire :', font=('Arial', 8, ('underline', 'bold')))
t.up()

t.listen()  # Déclenche l’écoute du clavier
t.onkeypress(deplacer_gauche, "Left")  # Associe à la touche Left une fonction appelée deplacer_gauche
t.onkeypress(deplacer_droite, "Right")
t.onkeypress(deplacer_haut, "Up")
t.onkeypress(deplacer_bas, "Down")
t.mainloop()  # Place le programme en position d’attente d’une action du joueur


#on utilise des global pcq le onkeypress appelle une fonction qui ne peut pas avoir de paramètres donc on utilise global avec des paramètres définis en bas
